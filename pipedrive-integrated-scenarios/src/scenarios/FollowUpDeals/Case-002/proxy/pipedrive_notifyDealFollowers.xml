<?xml version="1.0" encoding="UTF-8"?>
<proxy xmlns="http://ws.apache.org/ns/synapse" name="pipedrive_notifyDealFollowers" transports="https,http"
   statistics="disable" trace="disable" startOnLoad="true">
   <target>
      <inSequence onError="faultHandlerSeq">

         <!-- Pipedrive parameters -->
         <property name="pipedriveApiUrl" value="https://api.pipedrive.com"/>
         <property name="pipedriveApiToken" expression="json-eval($.pipedrive.apiToken)"/>

         <!-- Gmail parameters -->
         <property name="gmailUsername" expression="json-eval($.gmail.username)" />
         <property name="gmailAccessToken" expression="json-eval($.gmail.accessToken)" />
         <property name="gmailFromAddress" expression="json-eval($.gmail.fromAddress)" />

         <property name="currentDate" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd' )" scope="default" />

         <pipedrive.init>
            <apiToken>{$ctx:pipedriveApiToken}</apiToken>
            <apiUrl>{$ctx:pipedriveApiUrl}</apiUrl>
         </pipedrive.init>
         <pipedrive.listDealsTimeline>
            <amount>2</amount>
            <startDate>{$ctx:currentDate}</startDate>
            <interval>week</interval>
            <fieldKey>expected_close_date</fieldKey>
         </pipedrive.listDealsTimeline>

         <property name="responseStatus" expression="$axis2:HTTP_SC" />
         <filter xpath="get-property('responseStatus') != 200">
            <then>
               <property name="id" value="{}" />
               <property name="message" expression="json-eval($.error_info)" />
               <call-template target="responseHandlerTemplate">
                  <with-param name="activity" value="pipedrive_listDealsTimeline" />
                  <with-param name="id" value="{$ctx:id}" />
                  <with-param name="status" value="Error" />
                  <with-param name="message" value="{$ctx:message}" />
               </call-template>
               <loopback />
            </then>
         </filter>
         
         <property name="dealCount" expression="count(//deals)" scope="operation" />
         <property name="dealIndex" expression="0" scope="operation" />
         <property name="followersCount" value="0" scope="operation" />
         <property name="followersIndex" value="0" scope="operation" />
       
         <filter xpath="0 = get-property('operation', 'dealCount')">
            <then>
               <property name="id" value="{}" />
               <call-template target="responseHandlerTemplate">
                  <with-param name="activity" value="pipedrive_listDealsTimeline" />
                  <with-param name="id" value="{$ctx:id}" />
                  <with-param name="status" value="Error" />
                  <with-param name="message" value="No deals were returned from Pipedrive" />
               </call-template>
               <loopback />
            </then>
         </filter>
         
         <!-- Deals iterator -->
         <iterate continueParent="true" id="dealIterator" expression="//deals" sequential="true" preservePayload="true">
            <target>
               <sequence>
                  <property name="dealId" expression="//id" />
                  <property name="dealTitle" expression="//title" />
                  <property name="dealExpectedCloseDate" expression="//expected_close_date" />
                  
                  <!-- Get the followers for the deal from Pipedrive -->
                  <pipedrive.init>
                     <apiToken>{$ctx:pipedriveApiToken}</apiToken>
                     <apiUrl>{$ctx:pipedriveApiUrl}</apiUrl>
                  </pipedrive.init>
                  <pipedrive.listDealFollowers>
                     <id>{$ctx:dealId}</id>
                  </pipedrive.listDealFollowers>
                  
                  <property name="responseStatus" expression="$axis2:HTTP_SC" />
                  <filter xpath="get-property('responseStatus') != 200">
                     <then>
                        <property name="id" expression="fn:concat('dealId:', get-property('dealId'))" />
                        <property name="message" expression="json-eval($.error_info)" />
                        <property name="message" expression="fn:concat('Cannot retrieve deal followers. Error: ', get-property('message'))" />
                        <call-template target="responseHandlerTemplate">
                           <with-param name="activity" value="pipedrive_listDealsTimeline" />
                           <with-param name="id" value="{$ctx:id}" />
                           <with-param name="status" value="Error" />
                           <with-param name="message" value="{$ctx:message}" />
                        </call-template>
                     </then>
                     <else>
                        <property name="followersCountForDeal" expression="count(//data)" />
                        <property name="followersCount" expression="get-property('operation','followersCount') + get-property('followersCountForDeal')" scope="operation" />
                        
                        <property name="dealIndex" expression="get-property('operation','dealIndex') + 1" scope="operation" />
                        
                        <property name="emailList" value="" scope="operation" />
                        <iterate continueParent="true" id="followersIterator" expression="//data" sequential="true">
                           <target>
                              <sequence>
                                 <property name="followerId" expression="//data" />
                                 
                                 <!-- Retrieve details of the follower -->
                                 <pipedrive.init>
                                    <apiToken>{$ctx:pipedriveApiToken}</apiToken>
                                    <apiUrl>{$ctx:pipedriveApiUrl}</apiUrl>
                                 </pipedrive.init>
                                 <pipedrive.getUser>
                                    <id>{$ctx:followerId}</id>
                                 </pipedrive.getUser>
      
                                 <property name="responseStatus" expression="$axis2:HTTP_SC" />
                                 <filter xpath="get-property('responseStatus') != 200">
                                    <then>
                                       <property name="id" expression="fn:concat('dealId:', get-property('dealId'))" />
                                       <property name="message" expression="json-eval($.error_info)" />
                                       <property name="message" expression="fn:concat('Cannot retrieve follower information. Error: ', get-property('message'))" />
                                       <call-template target="responseHandlerTemplate">
                                          <with-param name="activity" value="pipedrive_listDealsTimeline" />
                                          <with-param name="id" value="{$ctx:id}" />
                                          <with-param name="status" value="Error" />
                                          <with-param name="message" value="{$ctx:message}" />
                                       </call-template>
                                    </then>
                                    <else>
                                       <property name="followerEmail" expression="//email" />
                                       
                                       <property name="emailList" expression="fn:concat(get-property('operation', 'emailList'), get-property('followerEmail'), ';')" scope="operation" />
                                    </else>
                                 </filter>
                                 
                                 <property name="followersIndex" expression="get-property('operation','followersIndex') + 1" scope="operation" />
                                 
                              </sequence>
                           </target>
                        </iterate>
                        
                        <!-- Build the message body -->
                        <payloadFactory media-type="json">
                           <format>
                              {
                                 "mailSubject": "Deal $1 expected to close on $2",
                                 "mailContent": "Hi,\n\nPlease be informed that the $1 deal with id $3 is expected to be closed on $2 days."
                              }
                           </format>
                           <args>
                              <arg expression="get-property('dealTitle')" />
                              <arg expression="get-property('dealExpectedCloseDate')" />
                              <arg expression="get-property('dealId')" />
                           </args>
                        </payloadFactory>

                        <!-- Build the message body to send in gmail -->
                        <property name="gmailSubject" expression="json-eval($.mailSubject)" />
                        <property name="gmailTextContent" expression="json-eval($.mailContent)" />

                        <!-- Send mail in Gmail -->
                        <filter source="boolean(get-property('gmailAccessToken'))" regex="true">
                           <then>
                              <gmail.gmailinit>
                                 <access_token>{$ctx:gmailAccessToken}</access_token>
                                 <userId>{$ctx:gmailUsername}</userId>
                              </gmail.gmailinit>
                              <gmail.createAMail>
                                 <to>{$ctx:emailList}</to>
                                 <subject>{$ctx:gmailSubject}</subject>
                                 <from>{$ctx:gmailFromAddress}</from>
                                 <messageBody>{$ctx:gmailTextContent}</messageBody>
                                 <cc></cc>
                                 <bcc></bcc>
                              </gmail.createAMail>

                              <property name="messageId" expression="json-eval($.id)" />

                              <filter source="boolean(get-property('messageId'))" regex="false">
                                 <then>
                                    <property name="status" value="Error" />
                                    <property name="message" expression="json-eval($.)" scope="operation" />
                                 </then>
                                 <else>
                                    <property name="status" value="Success" />
                                    <property name="message" expression="json-eval($.)" scope="operation" />
                                 </else>
                              </filter>
                           </then>
                           <else>
                              <property name="status" value="Skipped" />
                              <property name="message" value="Gmail OAuth access token is not provided in the request." />
                           </else>
                        </filter>
                        
                        <property name="id" expression="fn:concat('dealId:',get-property('dealId'))" />
                        <call-template target="responseHandlerTemplate">
                           <with-param name="activity" value="gmail_sendMail" />
                           <with-param name="id" value="{$ctx:id}" />
                           <with-param name="status" value="{$ctx:status}" />
                           <with-param name="message" value="{$ctx:message}" />
                        </call-template>
                             
                     </else>
                  </filter>
                  
               </sequence>
            </target>
         </iterate>

         <filter
            xpath="(get-property('operation', 'dealCount') = get-property('operation', 'dealIndex')) and
                                 (get-property('operation', 'followersCount') = get-property('operation', 'followersIndex'))">
            <then>
               <loopback />
            </then>
         </filter>
         
      </inSequence>
      <outSequence>
      
         <payloadFactory media-type="json">
            <format>{
               "Response":{
                  "activity":"pipedrive_notifyDealFollowers",
                     "activityResponse":[$1]
                  }
               }
            </format>
            <args>
               <arg expression="get-property('operation','responseString')" />
            </args>
         </payloadFactory>
         <property name="messageType" value="application/json" scope="axis2" />
         <send />
         
      </outSequence>
   </target>
   <description />
</proxy>