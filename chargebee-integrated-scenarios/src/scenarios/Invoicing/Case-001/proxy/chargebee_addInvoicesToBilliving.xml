<?xml version="1.0" encoding="UTF-8"?>
<proxy xmlns="http://ws.apache.org/ns/synapse"
       name="chargebee_addInvoicesToBilliving"
       transports="https,http"
       statistics="disable"
       trace="disable"
       startOnLoad="true">
   <target>
      <inSequence onError="faultHandlerSeq">

         <!-- ChargeBee API call related properties -->
         <property name="chargebeeApiUrl" expression="json-eval($.chargebeeApiUrl)" />
         <property name="chargebeeApiKey" expression="json-eval($.chargebeeApiKey)" />
         <property name="chargebeeLimit" expression="json-eval($.chargebeeLimit)" />
         <property name="chargebeeOffset" expression="json-eval($.chargebeeOffset)" />
         <property name="chargebeePaidOnAfter" expression="json-eval($.chargebeePaidOnAfter)" />

         <!-- Billiving API call related properties -->
         <property name="billivingApiUrl" value="https://www.billiving.com"/>
         <property name="billivingAccessToken" expression="json-eval($.billivingAccessToken)"/>

         <property name="invoiceCount" expression="0" scope="operation" />
         <property name="responseString" value="" scope="operation" />
         
         <!-- Retrieve invoices from ChargeBee -->
         <chargebee.init>
            <apiUrl>{$ctx:chargebeeApiUrl}</apiUrl>
            <apiKey>{$ctx:chargebeeApiKey}</apiKey>
         </chargebee.init>
         <chargebee.listInvoices>
            <limit>{$ctx:chargebeeLimit}</limit>
            <offset>{$ctx:chargebeeOffset}</offset>
            <paidOnAfter>{$ctx:chargebeePaidOnAfter}</paidOnAfter>
         </chargebee.listInvoices>

         <property name="responseStatus" expression="$axis2:HTTP_SC" />
         <filter xpath="get-property('responseStatus') != 200">
            <then>
               <property name="apiErrorMessage" expression="json-eval($.message)" />
               <property name="errorMessage" expression="fn:concat('(',$axis2:HTTP_SC,'), ', get-property('apiErrorMessage'))" />

               <call-template target="responseHandlerTemplate">
                  <with-param name="activity" value="chargebee_listInvoices" />
                  <with-param name="status" value="Error" />
                  <with-param name="message" value="{$ctx:errorMessage}" />
               </call-template>
               <loopback />
            </then>
         </filter>
         
         <property name="invoiceCount" expression="count(//invoice)" scope="operation" />
         <property name="invoiceIndex" expression="0" scope="operation" />
         <property name="selectedInvoices" expression="0" scope="operation" />
         <property name="lineItemCount" value="0" scope="operation" />
         <property name="lineItemIndex" value="0" scope="operation" />
       
         <filter xpath="0 = get-property('operation', 'invoiceCount')">
            <then>
               <call-template target="responseHandlerTemplate">
                  <with-param name="activity" value="chargebee_listInvoices" />
                  <with-param name="status" value="Error" />
                  <with-param name="message" value="No invoices were returned from ChargeBee" />
               </call-template>
               <loopback />
            </then>
         </filter>
         
         <!-- Provide the next offset value for the pagination purposes -->
         <property name="charebeeOffsetValue" expression="//jsonObject/next_offset/text()" /> 
         <filter xpath="boolean(get-property('charebeeOffsetValue'))">
            <then>
               <property name="status" value="Success" /> 
               <property name="message" 
                  expression="fn:concat('To get the next invoice list use this offset value: ',get-property('charebeeOffsetValue'))" /> 
               <call-template target="responseHandlerTemplate"> 
                  <with-param name="activity" value="charegbee_listInvoices" /> 
                  <with-param name="status" value="{$ctx:Status}" /> 
                  <with-param name="message" value="{$ctx:message}" /> 
               </call-template>
            </then>
         </filter>

         <iterate id="invoiceIterator" expression="//invoice" sequential="true" continueParent="true"
            preservePayload="true">
            <target>
               <sequence>
                  <property name="invoiceAmount" expression="//amount[parent::invoice]" />
                                    
                  <!-- Filter the non-zero invoices -->
                  <filter xpath="get-property('invoiceAmount') &gt; 0">
                     <then>
                        <property name="selectedInvoices" expression="get-property('operation', 'selectedInvoices') + 1" scope="operation" />
                        
                        <property name="invoiceId" expression="//id" />
                        <property name="discountAmountCents" expression="sum(//discounts/amount)" />
                        <property name="discountAmount" expression="get-property('discountAmountCents') div 100" />
                        <property name="customerId" expression="//customer_id" />
                        
                        <property name="lineItemCount" expression="count(//line_items)" />
                        <property name="invoiceLineItems" expression="//line_items" />
                                                
                        <!-- Retrieve ChargeBee customer details. -->
                        <chargebee.init>
                           <apiUrl>{$ctx:chargebeeApiUrl}</apiUrl>
                           <apiKey>{$ctx:chargebeeApiKey}</apiKey>
                        </chargebee.init>
                        <chargebee.getCustomer>
                           <customerId>{$ctx:customerId}</customerId>
                        </chargebee.getCustomer>
      
                        <property name="responseStatus" expression="$axis2:HTTP_SC" />
                        <filter xpath="get-property('responseStatus') != 200">
                           <then>
                              <property name="apiErrorMessage" expression="json-eval($.message)" />
                              <property name="errorMessage" expression="fn:concat('(',$axis2:HTTP_SC,'), Cannot retrieve customer information from ChargeBee. Error: ', get-property('apiErrorMessage'))" />
                              <property name="id" expression="fn:concat('chargebeeInvoiceId:', get-property('invoiceId'))" />
                              <call-template target="responseHandlerTemplate">
                                 <with-param name="activity" value="chargebee_listInvoices" />
                                 <with-param name="id" value="{$ctx:id}" />
                                 <with-param name="status" value="Error" />
                                 <with-param name="message" value="{$ctx:errorMessage}" />
                              </call-template>
                           </then>
                           <else>
                              <property name="email" expression="//customer/email/text()" />
                              <property name="firstName" expression="//first_name/text()" />
                              <property name="lastName" expression="//last_name/text()" />
      
                              <!-- Check the existence of the client in Billiving using email. -->
                              <billiving.init>
                                 <apiUrl>{$ctx:billivingApiUrl}</apiUrl>
                                 <accessToken>{$ctx:billivingAccessToken}</accessToken>
                              </billiving.init>
                              <billiving.listClients>
                                 <freeText>{$ctx:email}</freeText>
                              </billiving.listClients>
                              
                              <property name="responseStatus" expression="$axis2:HTTP_SC" />
                              <filter xpath="get-property('responseStatus') != 200">
                                 <then>
                                    <property name="id" expression="fn:concat('chargebeeInvoiceId:', get-property('invoiceId'))" />
                                    <property name="errorMessage" expression="//Message/text()" />
                                    <property name="errorMessage" expression="fn:concat('(',$axis2:HTTP_SC,'), ','Cannot check the existence of the client in Billiving. Error: ', get-property('errorMessage'))" />
                                    <call-template target="responseHandlerTemplate">
                                       <with-param name="activity" value="billiving_createClient" />
                                       <with-param name="id" value="{$ctx:id}" />
                                       <with-param name="status" value="Error" />
                                       <with-param name="message" value="{$ctx:errorMessage}" />
                                    </call-template>
                                 </then>
                                 <else>
                                    <property name="clientsCount" expression="count(//Id)" />
                                    
                                    <!--  If the client not exists create the client in Billiving. -->
                                    <filter xpath="0 = get-property('clientsCount')">
                                       <then>
                                          <property name="contactName" expression="fn:concat(get-property('firstName'), ' ', get-property('lastName'))" />
                                       
                                          <billiving.init>
                                             <apiUrl>{$ctx:billivingApiUrl}</apiUrl>
                                             <accessToken>{$ctx:billivingAccessToken}</accessToken>
                                          </billiving.init>
                                          <billiving.createClient>
                                             <email>{$ctx:email}</email>
                                             <contactName>{$ctx:contactName}</contactName>
                                          </billiving.createClient>
                                          
                                          <!-- Fetch the created client ID. -->
                                          <property name="billivingClientId" expression="//Id/text()" />
                                       </then>
                                       <else>
                                          <!-- Fetch the existing client ID. -->
                                          <property name="billivingClientId" expression="//jsonElement[1]/Id/text()" />
                                       </else>
                                    </filter>
                                    
                                    <!-- Halt the process if there is any error in creation of the client -->
                                    <property name="responseStatus" expression="$axis2:HTTP_SC" />
                                    <filter xpath="get-property('responseStatus') != 200">
                                       <then>
                                          <property name="id" expression="fn:concat('chargebeeInvoiceId:', get-property('invoiceId'))" />
                                          <property name="errorMessage" expression="fn:concat('(',$axis2:HTTP_SC,'), ','Cannot create client in Billiving')" />
                                          <call-template target="responseHandlerTemplate">
                                             <with-param name="activity" value="billiving_createClient" />
                                             <with-param name="id" value="{$ctx:id}" />
                                             <with-param name="status" value="Error" />
                                             <with-param name="message" value="{$ctx:errorMessage}" />
                                          </call-template>
                                       </then>
                                       <else>
                                       
                                          <!-- Construct ChargeBee line items to be converted to DocItems in Billiving. -->
                                          <payloadFactory media-type="xml">
                                             <format>
                                                <root xmlns="">$1</root>
                                             </format>
                                             <args>
                                                <arg expression="get-property('invoiceLineItems')" />
                                             </args>
                                          </payloadFactory>
                                          
                                          <property name="lineItemCount" expression="get-property('operation','lineItemCount') + get-property('lineItemCount')" scope="operation" />
                                          <property name="docItemsArray" value="[" scope="operation" />
                                       
                                          <iterate continueParent="true" id="lineItems" expression="//line_items" sequential="true">
                                             <target>
                                                <sequence>
                                                   <property name="itemId" expression="//entity_id" />
                                                   <property name="itemAmount" expression="//unit_amount" />
                                                   <property name="itemQuantity" expression="//quantity" />
                                                   <property name="itemDescription" expression="//description" />
                                                   
                                                   <!-- Generate the DocItem JSON object to be sent -->
                                                   <property name="docItemsArray" expression="get-property('operation','docItemsArray')" />
                                                   <script language="js">
                                                      <![CDATA[
                                                         var docItemsArray = mc.getProperty('docItemsArray');
                                                         var itemId = mc.getProperty('itemId');
                                                         var itemAmount = mc.getProperty('itemAmount');
                                                         var itemQuantity = mc.getProperty('itemQuantity');
                                                         var itemDescription = mc.getProperty('itemDescription');
                                                         
                                                         var docItem = '{';
                                                         
                                                         if (itemId != null && itemId != "") {
                                                            docItem += '"ItemId" : "' + itemId + '",';
                                                         }
                                                         if (itemAmount != null && itemAmount != "") {
                                                            docItem += '"ItemPrice" : "' + (itemAmount / 100) + '",';
                                                         }
                                                         if (itemQuantity != null && itemQuantity != "") {
                                                            docItem += '"ItemQuantity" : "' + itemQuantity + '",';
                                                         }
                                                         if (itemDescription != null && itemDescription != "") {
                                                            docItem += '"ItemDescription" : "' + itemDescription + '",';
                                                         }

                                                         if (docItem != "") {
                                                            docItem = docItem.substring(0, docItem.length - 1) + '},';
                                                         } 

                                                         mc.setProperty('docItemsArray', docItemsArray + docItem);
                                                      ]]>
                                                   </script>

                                                   <property name="docItemsArray" expression="get-property('docItemsArray')" scope="operation" />
                                                   
                                                   <property name="lineItemIndex" expression="get-property('operation','lineItemIndex') + 1"
                                                      scope="operation" />

                                                </sequence>
                                             </target>
                                          </iterate>

                                          <property name="docItemsArray" expression="get-property('operation', 'docItemsArray')" />
                                          <filter xpath="fn:string-length(get-property('docItemsArray')) > 0">
                                             <then>
                                                <property name="docItemsArray"
                                                   expression="fn:concat(fn:substring(get-property('docItemsArray'), 1, fn:string-length(get-property('docItemsArray'))-1), ']')" />
                                             </then>
                                          </filter>
                                          
                                          <billiving.init>
                                             <apiUrl>{$ctx:billivingApiUrl}</apiUrl>
                                             <accessToken>{$ctx:billivingAccessToken}</accessToken>
                                          </billiving.init>
                                          <billiving.createInvoice>
                                             <referenceNumber>{$ctx:invoiceId}</referenceNumber>
                                             <clientId>{$ctx:billivingClientId}</clientId>
                                             <discount>{$ctx:discountAmount}</discount>
                                             <id></id>
                                             <docItems>{$ctx:docItemsArray}</docItems>
                                          </billiving.createInvoice>

                                          <property name="responseStatus" expression="$axis2:HTTP_SC" />
                                          <filter xpath="get-property('responseStatus') != 200">
                                             <then>
                                                <property name="id" expression="fn:concat('chargebeeInvoiceId:', get-property('invoiceId'))" />
                                                <property name="errorMessage" expression="fn:concat('(',$axis2:HTTP_SC,'), ','Cannot create invoice in Billiving')" />
                                                <call-template target="responseHandlerTemplate">
                                                   <with-param name="activity" value="billiving_createInvoice" />
                                                   <with-param name="id" value="{$ctx:id}" />
                                                   <with-param name="status" value="Error" />
                                                   <with-param name="message" value="{$ctx:errorMessage}" />
                                                </call-template>
                                             </then>
                                             <else>
                                                <property name="billivingInvoiceId" expression="//Id" />
                                               
                                                <property name="id"
                                                   expression="fn:concat('chargebeeInvoiceId:', get-property('invoiceId'), ',billivingInvoiceId:', get-property('billivingInvoiceId'))" />
                                                <property name="errorMessage" value="ChargeBee invoice was successfully created in Billiving" />
                                                <call-template target="responseHandlerTemplate">
                                                   <with-param name="activity" value="billiving_createInvoice" />
                                                   <with-param name="id" value="{$ctx:id}" />
                                                   <with-param name="status" value="Success" />
                                                   <with-param name="message" value="{$ctx:errorMessage}" />
                                                </call-template>
                                             </else>
                                          </filter>
                                       </else>
                                    </filter>
                                 </else>
                              </filter>

                              <property name="invoiceIndex" expression="get-property('operation','invoiceIndex') + 1" scope="operation" />
                              
                           </else>
                        </filter>
                     </then>
                  </filter>
               </sequence>
            </target>
         </iterate>

         <filter
            xpath="(get-property('operation', 'invoiceCount') = get-property('operation', 'invoiceIndex')) and
                                 (get-property('operation', 'lineItemCount') = get-property('operation', 'lineItemIndex'))">
            <then>
               <filter xpath="0 = get-property('operation', 'selectedInvoices')">
                  <then>
                     <call-template target="responseHandlerTemplate">
                        <with-param name="activity" value="chargebee_listInvoices" />
                        <with-param name="status" value="Error" />
                        <with-param name="message" value="No non-zero invoices were found for the given time" />
                     </call-template>
                     <loopback />
                  </then>
               </filter>
               <loopback />
            </then>
         </filter>

      </inSequence>
      <outSequence>
         <property name="messageType" value="application/json" scope="axis2" />

         <!-- Generate the chained response of all the API calls in createLeads -->
         <payloadFactory media-type="json">
            <format>
               {
                  "Response":{
                     "process":"chargebee_addInvoicesToBilliving",
                     "activityResponse":[$1]
                  }
               }
            </format>
            <args>
               <arg expression="get-property('operation', 'responseString')" />
            </args>
         </payloadFactory>
         
         <send />
      </outSequence>
   </target>
   <description />
</proxy>